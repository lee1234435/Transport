import socket, threading # 소켓 통신, 병렬 구조로 계속 실행하기 위한 쓰레드 호출
import time # 타임 모듈 호출

bread_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# bread_client 생성 -> 소켓 통신을 하기 위해 IPv4 주소 사용(체계)을 의미하는 socket.AF_INET , 프로토콜 사용 의미를 나타내는 socket.SOCK_STREAM
bread_client.connect(("127.0.0.1", 12345))
 # 서버 IPv4 주소 : 127.0.0.1
 # 포트 번호 : 12345

name = 'bread' #name 변수에 'bread' 문자열 저장

def make_coffee(order_info, ea, order_num):
    # make_coffee 함수 생성
    _, p_name, _, p_time = order_info
    # order_info는 튜플 형식
    # order_list 데이터를 활용해서 [0],[2] 번 값은 무시
    # [1],[3]번 데이터는 order_info에 튜플형식으로 저장

    for i in range(ea):
        # ea에 저장된 값만큼 반복
        time.sleep(int(p_time)//1000)
        # p_time에 저장된 데이터를 정수로 변환 후 1000으로 나눈 만큼 대기
        print(f'{order_num}번 주문 {p_name} {i+1}개 완성')
        # f-string으로 문구출력 : 중간 점검 및 디버깅용

def receive():
    # 리시브 함수 생성
    while True:
        # 무한 반복
        message = bread_client.recv(1024).decode('utf-8')
        # 서버로부터 bread_client로 데이터를 수신, 최대 1024바이트까지 디코딩 작업을 거침 -> 디코딩 작업을 통해 문자열로 변환
        if message == 'NAME':
        # 서버에서 전송한 메시지가 문자열 NAME인지 확인 후 맞다면 클라이언트 이름을 서버로 보냄
            bread_client.send(name.encode('utf-8'))
            # 이때 클라이언트 이름은 name = 'bread'를 통해 bread로 설정됨 
            # 즉 서버에서 보낸 메시지가 NAME 이라면 클라이언트는 서버에게 bread를 보냄
        else:
        # 문자열이 NAME이 아니라면
            print(message)
            # 디버깅 확인용 메시지 출력
            message = eval(message)
            # 문자열 형태 메시지를 eval 함수를 써서 파이썬 객체로 변환 (주고받는 데이터 종류가 문자열 형태의 파이썬 객체일 경우 주로 사용)
            # 데이터 전처리 과정
            order_info, ea, order_num = message
            # 파이썬 객체로 받은 데이터 중 주문 정보, 개수, 번호를 추출
            # 이때 message 데이터 형식은 튜플이며 그 값을 order_info,ea, order_num에 순서대로 할당
            make_coffee(order_info, ea, order_num)
            # make_coffee 함수 실행 / order_info,ea,order_num 변수 사용
            bread_client.send(str(order_num).encode('utf-8'))
            # 주문 번호를 문자열 변환 후 인코딩 진행 및 데이터를 서버에 전송
# 멀티 클라이언트용 쓰레드
receive_thread = threading.Thread(target=receive)
receive_thread.start()

# receive 함수 무한 반복 진행중 -> 쓰레딩 실행 -> 백그라운드에서는 무한으로 반복중
# receive_thread에 저장 후 실행

import socket, threading # 소켓 통신 및 병렬식 동시 실행을 위한 쓰레딩 모듈 호출
import time # 타임 모듈 호출

coffee_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# coffee_client 변수 생성 -> 소켓 통신 IPv4 통신 : socket.AF_INET , protocol : socket.SOCK_STREAM 
coffee_client.connect(("127.0.0.1", 12345))
# 서버 IP 주소 : 127.0.0.1
# 포트 번호 : 12345

name = 'coffee'
# name 변수에 'coffee' 문자열 할당

def make_coffee(order_info, ea, order_num):
    # make_coffee 함수 생성 
    _, p_name, _, p_time = order_info
    # order_info는 튜플 형식 -> ex) t4 = 1,2,3,4 
    # [0], [2] 값 무시 -> [1], [3] 값만 order_info에 저장

    for i in range(ea):
    # ea 변수에 저장된 값만큼 반복
        time.sleep(int(p_time)//1000)
        # p_time 값을 intf화 시킨 후 1000으로 나눈 값만큼 대기
        print(f'{order_num}번 주문 {p_name} {i+1}개 완성')
        # f-string 문자 출력 -> 중간 과정 확인 후 디버깅 
    

def receive():
    # 리시브 함수 생성
    while True:
        # 무한 반복
        message = coffee_client.recv(1024).decode('utf-8')
        # 소켓을 활용해 연결 시켜둔 coffee_client에 서버로부터 데이터를 수신 (1024바이트) -> 받은 데이터 문자열을 디코딩 작업으로 변환
        if message == 'NAME':
            # 서버에서 전송한 메시지가 문자열 NAME인지 확인 후 맞다면 클라이언트 이름을 서버로 보냄
            coffee_client.send(name.encode('utf-8'))
            # 이때 클라이언트 이름은 name = 'coffee'를 통해 coffee로 설정됨 
            # 즉 서버에서 보낸 메시지가 NAME 이라면 클라이언트는 서버에게 coffee를 보냄
        else:
            # 문자열 name 아니라면
            print(message)
            # 디버깅 확인용 문자 출력
            message = eval(message)
            # 문자열 형태 메시지를 eval 함수를 써서 파이썬 객체로 변환 (주고받는 데이터 종류가 문자열 형태의 파이썬 객체일 경우 주로 사용)
            # 문자열 데이터 전처리 과정
            order_info, ea, order_num = message
            # 파이썬 객체로 받은 데이터 중에서 주문 정보, 개수, 번호를 추출
            # 이때 message 데이터 형식은 튜플이며 그 값을 order_info,ea, order_num에 순서대로 할당

            make_coffee(order_info, ea, order_num)
            # make_coffee 함수 실행 3개의 변수 할당 

            coffee_client.send(str(order_num).encode('utf-8'))
            # coffee_client에서 order_num을 str 형식으로 변환 후 디코딩 하여 서버로 보냄
        

# 멀티 클라이언트용 쓰레드
receive_thread = threading.Thread(target=receive)
receive_thread.start()


# receive 함수 무한 반복 진행중 -> 쓰레딩 실행 -> 백그라운드에서는 무한으로 반복중
# receive_thread에 저장 후 실행

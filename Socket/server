import socket, threading
# 소켓 통신 , 병렬식 쓰레딩을 위한 모듈 호출


server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# 소켓 통신을 위한 변수 생성 -> (IPv4, protocal)
server_ip = '127.0.0.1' # 주로 테스트용으로 많이 사용함
server_port = 12345
# ip 주소, 포트 번호 변수에 저장

server_socket.bind((server_ip, server_port))
# 앞서 서버 ip, 포트 번호 -> 소켓에 할당하기 위해 bind 사용
# 소켓 할당 뿐만 아니라, 같은 서버와 포트번호를 가진 클라이언트의 연결을 대기하는 상황에서 bind 사용한 경우
server_socket.listen()
# 클라이언트 연결을 받을 수 있게 서버 소켓을 대기상태로 설정
# 클라이언트가 서버 연결 시도시, 서버는 accept 메서드를 사용해서 클라이언트와 연결 수락
# 연결된 새로운 소켓 객체와 클라이언트 주소를 반환
# 통신용 객체 그리고 그안에 ip주소가 만들어지고 이게 클라이언트 주소



# ex) client_socket, client_address = server_socket.accept()
# 여기서 새로운 객체는 client_socket 이며, client_address는 클라이언트 ip주소& 포트 번호가 튜플 형식으로 저장 -> 2개가 반환된 값을 의미 -> 이를 통해 통신


clients = {}
# 빈 딕셔너리 생성
order_num = 0
# 주문 번호 초기화
order_dict = {}
# key : 주문 번호, value : 주문 개수


def kiosk_task(order_num, client_socket,order_dict):
    # order_num, client_socket, order_dict 변수 활용 및 kiosk 함수 정의
    while True:
    # 무한 반복
        message = client_socket.recv(1024).decode('utf-8')
        # 클라이언트 소켓에서 받음 (최대 1024 바이트) -> 디코딩 작업(2진수 데이터 -> 문자열)

        # 받은 메세지는 키오스크의 주문 목록을 의미 -> 전처리
        message = eval(message)
        # 예를 들어
        # server 파이썬 파일 실행 후 -> bread, coffee, beverage 파이썬 파일을 동시에 실행하고
        # kiosk 파일을 실행 -> 그러면 message = [(coffee,americano,5000,3000,3),...] 이런식으로 데이터를 받음
        # 이 message를 str로 형식 변환 후 다시 전처리를 하면 원래 모습인 message = [(coffee,americano,5000,3000,3),...] 이런식으로 변환
        # 이 message의 len() 결과는 튜플의 개수로 나옴
        # 그렇기에 1사람이 음료, 빵, 커피 등의 전체 주문 개수를 튜플 개수로 표현

        # 주문 개수를 세기 위한 코드
        order_dict[order_num] = len(message)
        order_num += 1
        clients['view'].send(f"주문번호 {order_num}번 대기중 입니다.".encode('utf-8'))
        # 클라이언트 뷰에게 현재 주문 번호를 전송
        client_socket.send(f"주문번호 {order_num}번 접수 되었습니다.".encode('utf-8'))
        # 또한 클라이언트 뷰에서 대기중 신호를 보낸다음 소켓에 주문 접수됬다는 문구를 다시 전송

        for item in message:
        # 
            order_info, ea = item
            # (('coffee', 'americano', '5000', '3000'), 3, 1) 여기서 ('coffee', 'americano', '5000', '3000'), 3 이부분이 item에 튜플로 저장됨


            
            # 해당 머신에게 작업 요청
            s = clients[order_info[0]]
            # 예를 들면, (('coffee', 'americano', '5000', '3000'), 3, 1) 중
            #  ('coffee', 'americano', '5000', '3000') 이 부분이 order_info 부분
            # 여기서 0 번째는 coffee를 말하며 name이 coffee를 가지고 있는 부분에서 작동
            print(str((order_info, ea, order_num)))
            # 예를 들면, (('coffee', 'americano', '5000', '3000'), 3, 1) 이부분이 출력됨 -> 디버깅용
            s.send(str((order_info, ea, order_num)).encode('utf-8'))
            # 예를 들면, (('coffee', 'americano', '5000', '3000'), 3, 1) 이 정보를 인코딩해서 coffee 파이썬 파일에 데이터를 보냄


def coffee_task(client_socket, order_num,order_dict):
    # 커피 만들기 데이터를 전송하는 용도
    while True:
        message = client_socket.recv(1024).decode('utf-8')        
        if message:
            print(f'{message}번 커피 나왔습니다.')
            if order_dict[order_num] > 1:
                order_dict[order_num] -= 1
            else:
                # 전광판에 완료 신호를 보낸다.
                clients['view'].send(f'주문번호 {message}번 완료되었습니다.'.encode('utf-8'))

def bread_task(client_socket, order_num,order_dict):
    # 빵 만들기 데이터를 전송하는 용도
    while True:
        # 무한 반복
        message = client_socket.recv(1024).decode('utf-8')     
        # 클라이언트 소켓에서 받은 메세지를 디코딩 작업   
        if message:
            # 주문 번호 받은 메세지가 존재 한다면
            print(f'{message}번 빵 나왔습니다.') # 문구 출력
            if order_dict[order_num] > 1: # 주문 번호가 1보다 크다면
                order_dict[order_num] -= 1 # -1 -> 즉 주문이 들어갔다는 것을 표현
                """
                # 코드 예시 
                # order_num = 3  # 주문 번호
                # key : message , value : order_num
                # order_dict = {1:3,
                #               2:2,
                #               3:1}
                # 일 때 order_dict[order_num] -= 1 이 실행되면
                # order_dict = {1:3,
                #               2:2,
                #               3:0} 즉 3이라는 키에 대한 value가 1씩 줄어들고
                # 만약 0이 된다면 이제 else문으로 바로 실행 즉, 주문이 다 끝난 상황을 말함
                """
            else: # 주문 개수 0 일때
                # 전광판에 완료 신호를 보낸다.
                clients['view'].send(f'주문번호 {message}번 완료되었습니다.'.encode('utf-8'))
                # view 클라이언트에게 해당 주문번호가 완료 되었다는 메세지를 보냄
def beverage_task(client_socket, order_num,order_dict):
    # 음료 만들기 데이터를 전송하는 용도
    while True:
        message = client_socket.recv(1024).decode('utf-8')        
        if message:
            print(f'{message}번 음료 나왔습니다.')
            if order_dict[order_num] > 1:
                order_dict[order_num] -= 1
            else:
                # 전광판에 완료 신호를 보낸다.
                clients['view'].send(f'주문번호 {message}번 완료되었습니다.'.encode('utf-8'))

# 클라이언트 소켓 연결, 함수 로출
def handler(client_socket, order_num, name,order_dict): 
    # client_socket : 클라이언트와 통신을 위한 소켓 객체
    # order_num : 현재 주문 번호
    # name : 클라이언트를 나타내는 문자열 -> 'kiosk','coffee','bread','beverage'
    # order_dict : {주문 번호 : 주문 개수}   
    if name == 'kiosk':
        kiosk_task(order_num, client_socket,order_dict)
    elif name == 'coffee':
        coffee_task(client_socket, order_num,order_dict)
    elif name == 'bread':
        bread_task(client_socket, order_num,order_dict)
    elif name == 'beverage':
        beverage_task(client_socket, order_num,order_dict)
    



while True:
    print('대기중...')
    client_socket, client_address = server_socket.accept()
    # accept() 클라이언트가 연결될 때까지 대기하며, 연결요청이 오면 연결수락을 함
    print(f'{client_address} 클라이언트 접속')

    client_socket.send("NAME".encode('utf-8'))
    # 클라이언트 소켓을 통해 "NAME" 문자열을 utf-8로 인코딩하여 전송
    name = client_socket.recv(1024).decode('utf-8')
    # 클라이언트 소켓을 통해 최대 1024바이트까지 데이터 수신 및 utf-8 디코딩을한후 문자열 'name'에 저장
    # 이를통해 클라이언트는 자신의 역할을 서버에 알림

    # 즉 client_socekt에 먼저 "NAME" 이라는 문자열을 보내고 키오스크,커피,빵,음료수 제조를 나타내는 파이썬 파일에 보냄 
    # 그 다음 각 파이썬 파일에서 name = kiosk,coffee,bread,beverage 로 정의 해뒀던 데이터를 받기 위해 recv를 쓴다
    # 데이터를 받은 후 여기서 name에 다시 할당 -> 각각의 파이썬 파일에서 다시 name을 보내줘서 여기서 받는다는 의미

    clients[name] = client_socket
    # 딕셔너리에 클라이언트의 역할을 key로하고 클라이언트 소켓을 value으로 저장
    # client -> {'name' : client_socket} 이런식으로 생성
    print(f'{client_address} 클라이언트 연결 완료')

    threading.Thread(target=handler, args=(client_socket, order_num, name,order_dict,)).start()
    # 쓰레드 실행 후 handler 함수를 실행, client_socekt, order_num, name, order_dict를 인자로 전달
    # threading.Thread: Thread 클래스의 인스턴스를 생성합니다.

    # target=handler: 실행될 함수를 지정합니다. 여기서는 handler 함수가 실행됩니다.

    # args=(client_socket, order_num, name, order_dict): 함수에 전달될 인자들을 튜플 형태로 지정합니다. 이 경우 handler 함수에 client_socket, order_num, name, order_dict를 순서대로 전달합니다.

    # start(): 생성한 Thread 객체를 시작합니다. 이 메서드를 호출하면 새로운 쓰레드에서 지정한 함수가 실행됩니다.


    
